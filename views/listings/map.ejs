<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Travel Route Planner</title>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css" rel="stylesheet">
    <link href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin: 20px 0;
            font-size: 2.5em;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .search-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .search-boxes {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .search-box {
            flex: 1;
        }

        .search-box label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 600;
        }

        .button-container {
            display: flex;
            gap: 20px;
        }

        .button {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s;
            color: white;
        }

        .find-route-btn {
            background: #3498db;
        }

        .find-route-btn:hover {
            background: #2980b9;
        }

        .get-suggestions-btn {
            background: #2ecc71;
        }

        .get-suggestions-btn:hover {
            background: #27ae60;
        }

        #map {
            width: 100%;
            height: 600px;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .suggestions-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            margin-top: 20px;
        }

        .suggestions-list {
            list-style: none;
        }

        .suggestion-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .suggestion-item:last-child {
            border-bottom: none;
        }

        .suggestion-info h3 {
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .suggestion-info p {
            color: #7f8c8d;
            font-size: 14px;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-size: 18px;
            color: #666;
        }

        .mapboxgl-popup {
            max-width: 300px;
        }

        .mapboxgl-popup-content {
            padding: 15px;
        }

        .poi-popup h4 {
            color: #2c3e50;
            margin-bottom: 8px;
        }

        .poi-popup p {
            color: #7f8c8d;
            font-size: 14px;
            line-height: 1.4;
        }

        .mapboxgl-ctrl-geocoder {
            width: 100% !important;
            max-width: none !important;
            font-family: inherit;
            box-shadow: none !important;
            border: 2px solid #ddd;
            border-radius: 6px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Travel Route Planner</h1>
        <div class="search-container">
            <div class="search-boxes">
                <div class="search-box">
                    <label for="from">Starting Point</label>
                    <div id="geocoder-from"></div>
                </div>
                <div class="search-box">
                    <label for="to">Destination</label>
                    <div id="geocoder-to"></div>
                </div>
            </div>
            <div class="button-container">
                <button id="find-route" class="button find-route-btn">Find Route & Points of Interest</button>
                <button id="get-suggestions" class="button get-suggestions-btn">Get AI Suggestions</button>
            </div>
        </div>
        <div id="map"></div>
        <div id="loading" class="loading">Getting AI suggestions...</div>
        <div id="suggestions-container" class="suggestions-container" style="display: none;">
            <h2>Suggested Places to Visit</h2>
            <ul id="suggestions-list" class="suggestions-list">
            </ul>
        </div>
    </div>
    <script src="js/map.js"></script>

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <script>
        // Replace with your actual API keys
        const MAPBOX_TOKEN = 'pk.eyJ1IjoicHJpeWFua2ExODE2IiwiYSI6ImNtM2cxY3FrbjAxdjEyanF6MmZsYmhiMjIifQ.JK4oNi5P7v4Q6XLAY6qXAg';
        const GEMINI_API_KEY = 'AIzaSyCdPQ_ehleQRqvCQg7EOcYfgz0GW2mELSw';
        
        mapboxgl.accessToken = MAPBOX_TOKEN;

        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [77.5946, 12.9716],
            zoom: 8
        });

        map.addControl(new mapboxgl.NavigationControl());

        const geocoderFrom = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            placeholder: 'Enter starting point',
            marker: false
        });

        const geocoderTo = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            placeholder: 'Enter destination',
            marker: false
        });

        document.getElementById('geocoder-from').appendChild(geocoderFrom.onAdd(map));
        document.getElementById('geocoder-to').appendChild(geocoderTo.onAdd(map));

        let fromCoords = null;
        let fromPlace = '';
        let toCoords = null;
        let toPlace = '';
        let markers = [];

        geocoderFrom.on('result', (e) => {
            fromCoords = e.result.center;
            fromPlace = e.result.place_name;
            addMarker(fromCoords, 'Start', '#3498db');
        });

        geocoderTo.on('result', (e) => {
            toCoords = e.result.center;
            toPlace = e.result.place_name;
            addMarker(toCoords, 'Destination', '#e74c3c');
        });

        function addMarker(coords, title, color) {
            const marker = new mapboxgl.Marker({ color: color })
                .setLngLat(coords)
                .setPopup(new mapboxgl.Popup().setHTML(`<h4>${title}</h4>`))
                .addTo(map);
            markers.push(marker);
        }

        async function getGeminiSuggestions(from, to) {
            const prompt = `Give me a list of exactly 5 famous tourist places and must-visit locations between ${from} and ${to}. For each place, provide its name, a brief description (max 100 characters), and its exact coordinates. Only include places that are actually located between or very near to the route between these two points. Return the response in this exact JSON format without any additional text:
            {
                "places": [
                    {
                        "name": "Place Name",
                        "description": "Brief description",
                        "coordinates": [longitude, latitude]
                    }
                ]
            }`;

            try {
                const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-1-9:generateText?key=' + GEMINI_API_KEY, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ prompt: prompt })
                });

                const data = await response.json();
                return data.choices[0].text;
            } catch (error) {
                console.error('Error fetching suggestions:', error);
            }
        }

        document.getElementById('find-route').addEventListener('click', async () => {
            if (!fromCoords || !toCoords) {
                alert('Please select both starting point and destination.');
                return;
            }

            const response = await fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/${fromCoords[0]},${fromCoords[1]};${toCoords[0]},${toCoords[1]}?steps=true&geometries=geojson&access_token=${MAPBOX_TOKEN}`);
            const routeData = await response.json();
            const routeGeoJSON = routeData.routes[0].geometry;

            if (markers.length > 0) markers.forEach(marker => marker.remove());
            markers = [];

            new mapboxgl.Marker({ color: '#3498db' })
                .setLngLat(fromCoords)
                .addTo(map);

            new mapboxgl.Marker({ color: '#e74c3c' })
                .setLngLat(toCoords)
                .addTo(map);

            const routeLayer = {
                id: 'route',
                type: 'line',
                source: {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: [{
                            type: 'Feature',
                            geometry: routeGeoJSON
                        }]
                    }
                },
                paint: {
                    'line-color': '#3498db',
                    'line-width': 6
                }
            };

            map.addLayer(routeLayer);
        });

        document.getElementById('get-suggestions').addEventListener('click', async () => {
            if (!fromPlace || !toPlace) {
                alert('Please select both starting point and destination.');
                return;
            }

            document.getElementById('loading').style.display = 'block';
            const suggestions = await getGeminiSuggestions(fromPlace, toPlace);
            document.getElementById('loading').style.display = 'none';

            const suggestionsList = JSON.parse(suggestions).places;
            const suggestionsContainer = document.getElementById('suggestions-list');
            suggestionsContainer.innerHTML = '';

            suggestionsList.forEach(suggestion => {
                const suggestionItem = document.createElement('li');
                suggestionItem.classList.add('suggestion-item');
                suggestionItem.innerHTML = `
                    <div class="suggestion-info">
                        <h3>${suggestion.name}</h3>
                        <p>${suggestion.description}</p>
                    </div>
                    <div class="suggestion-coordinates">
                        <p>Coordinates: ${suggestion.coordinates[1].toFixed(2)}, ${suggestion.coordinates[0].toFixed(2)}</p>
                    </div>
                `;
                suggestionsContainer.appendChild(suggestionItem);
            });

            document.getElementById('suggestions-container').style.display = 'block';
        });
    </script>

</body>
</html>
